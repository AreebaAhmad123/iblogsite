# ===== ISLAMIC STORIES BLOG - ENVIRONMENT CONFIGURATION =====

# MongoDB Connection
# Use MongoDB Atlas for production or local MongoDB for development
MONGO_URI=mongodb://localhost:27017/islamic-stories-blog

# JWT Configuration
# Generate a strong, random secret key (at least 32 characters)
# You can generate one using: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
SECRET_ACCESS_KEY=your_jwt_secret_key_here_make_it_long_and_secure_at_least_32_characters

# Cloudinary Configuration (for image uploads)
CLOUDINARY_CLOUD_NAME=your_cloudinary_cloud_name
CLOUDINARY_API_KEY=your_cloudinary_api_key
CLOUDINARY_API_SECRET=your_cloudinary_api_secret

# Server Configuration
PORT=3000
NODE_ENV=development

# Frontend URL (for CORS and email links)
FRONTEND_URL=http://localhost:5173

# Email Configuration (for user verification and notifications)
ADMIN_EMAIL=your_admin_email@gmail.com
ADMIN_EMAIL_PASSWORD=your_app_specific_password

# Google OAuth Configuration
GOOGLE_CLIENT_ID=your_google_client_id_here

# Security Configuration
# Rate limiting settings
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100
AUTH_RATE_LIMIT_MAX_REQUESTS=5

# Session configuration
SESSION_SECRET=your_session_secret_here
JWT_EXPIRES_IN=1h
JWT_REFRESH_EXPIRES_IN=7d

# File upload limits
MAX_FILE_SIZE=2097152
ALLOWED_FILE_TYPES=image/jpeg,image/png,image/jpg

# Database connection settings
MONGODB_CONNECTION_TIMEOUT=5000
MONGODB_SOCKET_TIMEOUT=45000

# ===== PRODUCTION SETTINGS =====
# Uncomment and configure these for production deployment

# HTTPS Configuration
# FORCE_HTTPS=true
# SSL_CERT_PATH=/path/to/ssl/certificate
# SSL_KEY_PATH=/path/to/ssl/private/key

# Redis Configuration (for session storage and caching)
# REDIS_URL=redis://localhost:6379
# REDIS_PASSWORD=your_redis_password

# Logging Configuration
# LOG_LEVEL=info
# LOG_FILE_PATH=/var/log/islamic-stories/app.log

# Monitoring and Analytics
# SENTRY_DSN=your_sentry_dsn_here
# GOOGLE_ANALYTICS_ID=your_ga_id_here

# ===== SECURITY NOTES =====
# 1. Never commit this file to version control
# 2. Use strong, unique passwords for all services
# 3. Enable 2FA on all admin accounts
# 4. Regularly rotate secrets and API keys
# 5. Use environment-specific configurations
# 6. Monitor logs for suspicious activity
# 7. Keep all dependencies updated
# 8. Use HTTPS in production
# 9. Implement proper backup strategies
# 10. Regular security audits 